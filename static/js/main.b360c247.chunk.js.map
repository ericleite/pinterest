{"version":3,"sources":["components/App/App.module.scss","components/Dashboard/Dashboard.module.scss","hooks/useElementDimension.js","utils/element.js","components/Dashboard/Dashboard.js","utils/dashboard.js","components/InfiniteScroll/InfiniteScroll.js","utils/api.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultGetDimension","el","getElWidth","clientWidth","MAX_PIN_HEIGHT","parseInt","styles","MAX_PIN_WIDTH","Dashboard","pins","getDimension","useState","setEl","dimension","setDimension","ref","useCallback","useEffect","handleResize","window","addEventListener","removeEventListener","useElementDimension","width","layout","columns","maxPinHeight","maxPinWidth","initialLayout","Array","map","height","reduce","pin","shortestColumn","minColumnHeight","Infinity","forEach","column","scaledPinHeight","Math","min","push","getDashboardLayout","className","dashboard","index","Column","key","alt_description","id","urls","Pin","alt","src","regular","ticking","InfiniteScroll","children","onLoad","threshold","scrollY","setScrollY","isPastThreshold","setIsPastThreshold","isLoading","setIsLoading","handleScroll","requestAnimationFrame","document","body","clientHeight","innerHeight","a","handleOnLoad","unsplashApi","axios","create","baseURL","headers","Authorization","process","DEFAULT_PARAMS","per_page","dashboardStyles","imageStore","localForage","name","App","state","currentPage","loadCurrentPage","response","Response","params","page","get","Object","assign","data","item","setItem","console","error","loadNextPage","setState","prevState","log","setPins","concat","time","iterate","image","timeEnd","length","this","app","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b360c247.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3BT4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"COLUMN_SPACING\":\"16px\",\"MAX_PIN_HEIGHT\":\"600px\",\"MAX_PIN_WIDTH\":\"296px\",\"dashboard\":\"Dashboard_dashboard__3-njO\",\"column\":\"Dashboard_column__3a0jo\",\"pin\":\"Dashboard_pin__38wJl\"};","import { useCallback, useEffect, useState } from \"react\";\n\nfunction defaultGetDimension(el) {\n  // noop\n}\n\nexport default function useElementDimension(\n  getDimension = defaultGetDimension\n) {\n  const [el, setEl] = useState();\n  const [dimension, setDimension] = useState();\n\n  const ref = useCallback(el => {\n    setEl(el);\n  }, []);\n\n  useEffect(() => {\n    setDimension(getDimension(el));\n  }, [el, getDimension]);\n\n  useEffect(() => {\n    function handleResize() {\n      setDimension(getDimension(el));\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [el, getDimension]);\n\n  return [dimension, ref];\n}\n","export function getElWidth(el) {\n  return (el && el.clientWidth) || 0;\n}\n\nexport function getElHeight(el) {\n  return (el && el.clientHeight) || 0;\n}\n","// Libs\nimport React from \"react\";\n\n// Hooks\nimport useElementDimension from \"hooks/useElementDimension\";\n\n// Utils\nimport { getDashboardLayout } from \"utils/dashboard\";\nimport { getElWidth } from \"utils/element\";\n\n// Styles\nimport styles from \"./Dashboard.module.scss\";\n\n// Constants\nconst MAX_PIN_HEIGHT = parseInt(styles.MAX_PIN_HEIGHT, 10);\nconst MAX_PIN_WIDTH = parseInt(styles.MAX_PIN_WIDTH, 10);\n\nexport default function Dashboard({ pins = [] }) {\n  const [width, ref] = useElementDimension(getElWidth);\n  const layout = getDashboardLayout(pins, {\n    columns: (width / MAX_PIN_WIDTH) >> 0 || 1,\n    maxPinHeight: MAX_PIN_HEIGHT,\n    maxPinWidth: MAX_PIN_WIDTH\n  });\n\n  return (\n    <div className={styles.dashboard} ref={ref}>\n      {layout.map((column, index) => (\n        <Column key={index} pins={column.pins} />\n      ))}\n    </div>\n  );\n}\n\nfunction Column({ pins = [] }) {\n  return (\n    <div className={styles.column}>\n      {pins.map(({ alt_description, id, urls }) => (\n        <Pin key={id} alt={alt_description} id={id} src={urls.regular} />\n      ))}\n    </div>\n  );\n}\n\nfunction Pin({ alt, id, src }) {\n  return (\n    <figure key={id} className={styles.pin}>\n      <img alt={alt} src={src} />\n    </figure>\n  );\n}\n","export function getDashboardLayout(\n  pins = [],\n  { columns, maxPinHeight, maxPinWidth } = {\n    columns: 1,\n    maxPinHeight: 1,\n    maxPinWidth: 1\n  }\n) {\n  const initialLayout = [...new Array(columns)].map(() => ({\n    height: 0,\n    pins: []\n  }));\n\n  return pins.reduce((layout, pin) => {\n    let shortestColumn = layout[0];\n    let minColumnHeight = Infinity;\n\n    layout.forEach(column => {\n      if (column.height < minColumnHeight) {\n        minColumnHeight = column.height;\n        shortestColumn = column;\n      }\n    });\n\n    const scaledPinHeight = Math.min(\n      (pin.height / pin.width) * maxPinWidth,\n      maxPinHeight\n    );\n\n    shortestColumn.height += scaledPinHeight;\n    shortestColumn.pins.push(pin);\n\n    return layout;\n  }, initialLayout);\n}\n","// Libs\nimport { useEffect, useState } from \"react\";\n\n// Utils\nimport { getElHeight } from \"utils/element\";\n\nlet ticking = false;\n\nexport default function InfiniteScroll({ children, onLoad, threshold = 0 }) {\n  const [scrollY, setScrollY] = useState(window.scrollY);\n  const [isPastThreshold, setIsPastThreshold] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    function handleScroll() {\n      if (!ticking) {\n        window.requestAnimationFrame(() => {\n          setScrollY(window.scrollY);\n          ticking = false;\n        });\n\n        ticking = true;\n      }\n    }\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (\n      scrollY > 0 &&\n      scrollY > getElHeight(document.body) - window.innerHeight - threshold\n    ) {\n      setIsPastThreshold(true);\n    } else {\n      setIsPastThreshold(false);\n    }\n    // TODO: This should also depend on window.innerHeight\n  }, [scrollY, isLoading, threshold]);\n\n  useEffect(() => {\n    async function handleOnLoad() {\n      if (isPastThreshold && !isLoading) {\n        setIsLoading(true);\n        await onLoad();\n        setIsLoading(false);\n      }\n    }\n\n    handleOnLoad();\n\n    return () => {\n      // TODO: Cancel any pending requests\n    };\n    // This effect should only run when the threshold state changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPastThreshold, onLoad]);\n\n  return children;\n}\n","import axios from \"axios\";\n\nexport const unsplashApi = axios.create({\n  baseURL: \"https://api.unsplash.com/\",\n  headers: {\n    \"Accept-Version\": \"v1\",\n    Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_API_ACCESS_KEY}`\n  }\n});\n\nconst DEFAULT_PARAMS = { per_page: 15 };\n\nexport function fetchImages(params) {\n  return unsplashApi.get(\"/photos\", {\n    params: Object.assign({}, DEFAULT_PARAMS, params)\n  });\n}\n","// Libs\nimport React from \"react\";\nimport * as localForage from \"localforage\";\n\n// Components\nimport Dashboard from \"components/Dashboard\";\nimport InfiniteScroll from \"components/InfiniteScroll\";\n\n// Utils\nimport { fetchImages } from \"utils/api\";\n\n// Styles\nimport styles from \"./App.module.scss\";\nimport dashboardStyles from \"components/Dashboard/Dashboard.module.scss\";\n\n// Constants\nconst MAX_PIN_HEIGHT = parseInt(dashboardStyles.MAX_PIN_HEIGHT, 10);\n\nconst imageStore = localForage.createInstance({\n  name: \"imageStore\"\n});\n\nexport default class App extends React.Component {\n  state = {\n    currentPage: 1,\n    pins: []\n  };\n\n  async componentDidMount() {\n    const pins = [];\n\n    // Attempt to load data from local storage\n    console.time(\"Store Read Time\");\n    try {\n      await imageStore.iterate(image => {\n        pins.push(image);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    console.timeEnd(\"Store Read Time\");\n\n    if (pins.length > 0) {\n      this.setPins(pins);\n    } else {\n      const response = await this.loadCurrentPage();\n      this.setPins(response.data);\n    }\n  }\n\n  render() {\n    return (\n      <div className={styles.app}>\n        <InfiniteScroll onLoad={this.loadNextPage} threshold={MAX_PIN_HEIGHT}>\n          <Dashboard pins={this.state.pins} />\n        </InfiniteScroll>\n      </div>\n    );\n  }\n\n  // -------\n  // HELPERS\n  // -------\n\n  loadCurrentPage = async () => {\n    let response = new Response();\n\n    try {\n      // Fetch images for the current page\n      response = await fetchImages({ page: this.state.currentPage });\n\n      // Save response in local storage\n      for (const item of response.data) {\n        await imageStore.setItem(item.id, item);\n      }\n    } catch (error) {\n      // TODO: Log response error and notify user\n      console.error(error);\n    }\n\n    return response;\n  };\n\n  loadNextPage = async () => {\n    this.setState(\n      prevState => ({\n        currentPage: prevState.currentPage + 1\n      }),\n      async () => {\n        console.log(\"loading page\", this.state.currentPage);\n\n        const response = await this.loadCurrentPage();\n\n        if (response.data) {\n          this.setPins(this.state.pins.concat(response.data));\n        }\n      }\n    );\n  };\n\n  setPins = pins => {\n    this.setState({\n      pins\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}